Gridulous is intended to be a flexible, extendable grid plugin. There are a few
things that I intended this plugin to provide--things I was unable to find in
existing plugins:

1. The ability to extract, modify and store configuration of the grid. All
changes to the state of the grid are pushed into the configuration before
taking any action. That way the configuration is a valid snapshot of the state
of the grid at any moment in time.
2. The ability to customize the search dialog for your specific needs. This
includes customizing the search filters that you want Gridulous to pass to your
service action.
3. Clear exposure of the styling of the grid so that the visual can be
customized.
4. Tight jQuery integration so that the grid can be easily hacked apart as
needed for your special needs.
5. An object oriented approach to the organization of the code. This is
intended to be an aid to navigating the source and making changes you might
desire.

At this time, this project is nowhere near ready for primetime but you are more
than welcome to grab it and poke around at it. There is a screenshot included
in the root directory of the project called ss_01.png that shows what Gridulous
looks like as of 6/26/11.

Dependencies:
-------------
1. jQuery                    (http://jquery.com)
2. jQuery-UI                 (http://jqyueryui.com

Coffeescript and SASS:
---------------------
Gridulous is authored in Coffeescript using SASS for the stylesheets. In the
deployment zip there are directories for Coffeescript, Javascript, CSS and SASS
so that you can use the plugin as you like. If you do not wish to install or
use Coffeescript and SASS, just grab the precompiled things out of the deploy
zip.

For a working example of how to configure Gridulous, see people-table.coffee in
public/javascripts. Once you have your own configuration built up, take a quick
peek at app/views/people/index.html.haml to see what you have to add to the
file to get it working. It's not painful.

On my list of things to do:

* replace all background images with CSS gradient classes
* replace HAML dialogs with generic HTML files
* ensure that not EVERY configuration detail has to be submitted every time :P
* conditionalize inclusion of the various widget components--only show the
pagination bar if the flag is set in the configuration, etc.
* allow injection of customized classes through the configuration. Easiest:
use it with styles provided. Less easy: specify css classes via configuration
to customize the appearance. Even less easy: direct manipulation of the .sass
or .css files to fully customize the appearance.
* custom search filters are just a gleam in my eyes at the moment.
* simple examples of how to use the grid.

My aim is that at the end of the day the only hard external dependencies will
be jQuery and jQuery-UI. At the moment HAML is required for the column
selection and search dialogs.

Any feedback and/or questions are completely welcomed!
